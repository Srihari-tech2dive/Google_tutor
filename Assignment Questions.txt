Mini-Assignment 1: Getting to Know You
    Your first assignment is to write a small program that does the following. This will help you practice everything we just learned.

    Create a variable to store your name.

    Create another variable to store the year you were born.

    Ask the user for their target company for the placement drive and store it in a variable.

    Calculate your approximate current age (Current Year - Birth Year).

    Print a summary message to the screen. It should look something like this:
    "Hello, Arjun! You are approximately 21 years old. We will work hard to get you into Google."


Mini-Assignment 2: The Number Analyzer
    Let's combine what we've learned. Write a program that does the following:

    Asks the user to enter one integer.

    Analyzes the number and prints two things about it:

    First, it should state if the number is positive, negative, or zero.

    Second, it should state if the number is even or odd.

Mini-Assignment 3: Loops and Logic Challenges
    Here are a few problems to solve. These are very common in technical interviews, so take your time and think them through!

    Question 1: The FizzBuzz Challenge (A Classic Placement Question)
    Write a program that prints numbers from 1 to 100, each on a new line.

    If the number is a multiple of 3, print "Fizz" instead of the number.

    If the number is a multiple of 5, print "Buzz" instead of the number.

    If the number is a multiple of both 3 and 5, print "FizzBuzz".
    (Hint: The order of your if/elif conditions matters! Check for the most specific case first.)

    Question 2: The Input Validator
    Write a program that continuously asks the user to "Enter a positive number: ".

    The loop should continue asking as long as the user enters a number that is less than or equal to 0.

    Once the user enters a positive number, the program should print a confirmation message like "Success! 15 is a positive number." and then terminate.
    (Hint: A while loop is perfect for this.)

    Question 3: The Summation Challenge
    Write a program that asks the user for an integer n. The program should then calculate and display the sum of all numbers from 1 up to and including n.

    For example, if the user enters 5, the program should calculate 1 + 2 + 3 + 4 + 5 and print The sum is: 15.
    (Hint: You'll need a variable to keep track of the total sum. Initialize it to 0 before the loop starts.)


Mini-Assignment 4: The To-Do List Manager


        Let's build a practical program that combines lists, loops, and conditionals. You will create a simple To-Do list application.

        Your program should:

        Start with an empty list called tasks.

        Use a while True loop to continuously show the user a menu of options.

        The menu should ask the user to enter one of these words: "add", "view", "remove", or "exit".

        If the user enters "add": Ask them for the task (e.g., "Finish Python assignment") and append it to your tasks list.

        If the user enters "view": Loop through the tasks list and print each task neatly. If the list is empty, print "Your to-do list is empty."

        If the user enters "remove": Ask them for the task they want to remove and use the list's .remove() method to delete it. (e.g., tasks.remove("text to remove")).

        If the user enters "exit": break the loop to end the program.

        This is a bigger challenge, but it combines everything you've learned so far! Take your time, and let me see your code when you're ready.



Mini-Assignment 4.5: The Simple Contact Book

    Your goal is to create a program to manage a list of contacts. Each contact will be stored as a simple string in the format `"Name:PhoneNumber"`.

    **Your program should:**

    1.  Start with an empty list called `contacts`.
    2.  Use a `while True` loop to continuously show the user a menu of options.
    3.  The menu should ask the user to enter one of these commands: "**add**", "**view**", "**search**", or "**exit**".

        * If the user enters "**add**":
            * Ask for the person's **name**.
            * Ask for the person's **phone number**.
            * Combine them into a single string like `"Alice:1234567890"` and **add** it to your `contacts` list.

        * If the user enters "**view**":
            * If the list is empty, print a message like "Your contact book is empty."
            * Otherwise, **loop** through the `contacts` list and print each contact on a new line.

        * If the user enters "**search**":
            * Ask the user for a **name** to search for.
            * **Loop** through your `contacts` list. For each contact string, check if the search name is in that string.
            * If you find a match, print the full contact details (e.g., `"Found: Alice:1234567890"`).
            * If you loop through the entire list and find no match, print a "Contact not found" message.

        * If the user enters "**exit**":
            * **Break** the loop to end the program.


Mini-Assignment 4.7: The Simple Expense Tracker
    Your goal is to build a basic program that allows a user to track their expenses. The program will keep a running list of expense amounts and be able to calculate the total.

    Your program should:

    Start with an empty list called expenses.

    Use a while True loop to create a menu that asks the user to enter one of the following commands: "add", "show", or "exit".

    If the user enters "add":

    Ask the user for an expense amount (e.g., "Enter the amount:").

    You must convert this input into a number. Use float() to allow for decimal values (like 25.50).

    Challenge: What happens if the user types "hello" instead of a number? Your program will crash. To prevent this, wrap your input conversion in a try-except block.

    Python

    try:
        amount = float(input("Enter the amount: "))
        expenses.append(amount)
        print(f"Added expense: ${amount:.2f}")
    except ValueError:
        print("Invalid input. Please enter a number.")
    If the user enters "show":

    If the expenses list is empty, print "You have no expenses yet."

    Otherwise:

    Print a header like "--- Your Expenses ---".

    Loop through the expenses list and print each one.

    After the loop, calculate the total of all expenses and print it (e.g., "Total: $150.75").

    If the user enters "exit":

    Print a final message like "Goodbye!" and break the loop.